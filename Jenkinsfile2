pipeline {
    agent any
    environment {
        name = "Anmol"
        age = "23"
        platform = "Jenkins"
        uses = "Automation"
        IMAGE_NAME = 'anmolmishra334/jenkins_project'
        DOCKER_CREDENTIALS_ID = 'docker_cred'
        KUBERNETES_CONTEXT = 'minikube'
        IMAGE_TAG = "${env.BUILD_ID}"
        NEXUS_CREDENTIALS_ID = 'nexus-cred'
        NEXUS_URL = 'http://localhost:8081/repository/maven-releases/'
    }
    tools {
        jdk 'JDK'
        maven 'maven3'
    }
    stages {
        stage('Clear Workspace') {
            steps {
                cleanWs deleteDirs: true
            }
        }
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/anmolmishra334/Petclinic.git'
            }
        }
        stage('Maven Clean Package Creation') {
            parallel {
                stage('Maven Validate') {
                    steps {
                        bat 'mvn validate'
                    }
                }
                stage('Maven Compile') {
                    steps {
                        bat 'mvn clean compile'
                    }
                }
                stage('Maven Test') {
                    steps {
                        bat 'mvn test'
                    }
                }
            }
        }
        stage('Maven Package') {
            steps {
                bat 'mvn clean package'
            }
        }
        stage('Maven Archive Package') {
            steps {
                archiveArtifacts artifacts: 'target/petclinic.war', followSymlinks: false
            }
        } /*
        stage('Upload to Nexus Repo') {
            steps {
                withCredentials([usernamePassword(credentialsId: NEXUS_CREDENTIALS_ID, passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                    bat """
                        mvn deploy:deploy-file -DgroupId=com.example -DartifactId=petclinic \
                        -Dversion=${env.BUILD_ID} -Dpackaging=war -Dfile=target/petclinic.war \
                        -DrepositoryId=nexus-releases -Durl=${NEXUS_URL} \
                        -Dusername=${NEXUS_USERNAME} -Dpassword=${NEXUS_PASSWORD}
                    """
                }
            }
        } */
        stage('PR Approval Request') {
            steps {
                timeout(time: 300, unit: 'SECONDS') {
                    input id: 'YES', message: 'Enter Yes or No for PR Request Creation.', ok: 'YES', submitter: 'admin', submitterParameter: 'approval'
                }
            }
        }
        stage('Create Pull Request') {
            steps {
                script {
                    def branchName = 'feature/new_branch_1' // Replace with the branch you want to merge
                    def token = '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' // GitHub Personal Access Token
                    def repo = 'anmolmishra334/Petclinic' // GitHub repo
                    def prTitle = 'Auto PR from Jenkins'
                    def prBody = 'This is an automated PR created by Jenkins after a successful build.'

                    bat """
                        curl -X POST -H "Authorization: token ${token}" -H "Accept: application/vnd.github.v3+json" ^
                        https://api.github.com/repos/${repo}/pulls ^
                        -d "{\\"title\\": \\"${prTitle}\\", \\"body\\": \\"${prBody}\\", \\"head\\": \\"${branchName}\\", \\"base\\": \\"main\\"}"
                    """
                }
            }
        }
        stage('Deploy to Tomcat') {
            steps {
                bat 'copy /Y target\\petclinic.war "C:\\Program Files\\Apache Software Foundation\\Tomcat 10.1\\webapps"'
            }
        }
        stage('Parameters and Environment Variables Usage') {
            parallel {
                stage('Choice Parameter') {
                    steps {
                        echo "${params.choices}"
                    }
                }
                stage('Single Parameter Input') {
                    steps {
                        echo "${params.string_parameter_input}"
                    }
                }
                stage('Multi-line Parameter Input') {
                    steps {
                        echo "${params.multi_line_string_parameter}"
                    }
                }
                stage('Environment Variables in Jenkinsfile') {
                    steps {
                        echo "My name is ${name} and my age is ${age}, I am using ${platform} platform for ${uses}."
                    }
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${env.BUILD_ID}")
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        echo 'Logged in to Docker Hub'
                    }
                }
            }
        }
        stage('Push Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        docker.image("${IMAGE_NAME}:${env.BUILD_ID}").push()
                        echo 'Image pushed to Docker Hub'
                    }
                }
            }
        }
         stage('Deploy to Minikube') {
    steps {
        script {
            // Delete all existing deployments
            echo "kubectl delete deployment --all"
            echo "All existing deployments deleted"

            // Create a new deployment
            echo "kubectl create deployment ${container_name} --image=${IMAGE_NAME}:${BUILD_ID}"

            echo "${container_name} successfully created"

            // Expose the deployment on port 80 as a LoadBalancer service
            echo "kubectl expose deployment ${container_name} --port=80 --type=LoadBalancer"
            echo "${container_name} is successfully deployed on port 80"

            // Get the service URL from Minikube
            echo "minikube service ${container_name}"
            echo "Access application from the above link"
        }
    }
}

}
}
